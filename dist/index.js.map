{
  "version": 3,
  "sources": ["../lib/median.js", "../lib/validate.js", "../lib/print.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar floor = require( '@stdlib/math-base-special-floor' );\n\n\n// FUNCTIONS //\n\n/**\n* Comparator function used to sort values in ascending order.\n*\n* @private\n* @param {number} a - first number\n* @param {number} b - second number\n* @returns {number} difference between `a` and `b`\n*/\nfunction ascending( a, b ) {\n\treturn a - b;\n}\n\n\n// MAIN //\n\n/**\n* Computes the median of an array.\n*\n* @param {Array} arr - input array\n* @returns {number} median value\n*/\nfunction median( arr ) {\n\tvar len = arr.length;\n\tvar id;\n\tvar d;\n\tvar i;\n\n\tif ( !len ) {\n\t\treturn null;\n\t}\n\n\t// Copy and sort data in ascending order:\n\td = [];\n\tfor ( i = 0; i < len; i++ ) {\n\t\td.push( arr[ i ] );\n\t}\n\td.sort( ascending );\n\n\t// Get the middle index:\n\tid = floor( len / 2 );\n\n\tif ( len % 2 ) {\n\t\t// The number of elements is not evenly divisible by two, hence we have a middle index:\n\t\treturn d[ id ];\n\t}\n\t// Even number of elements, so must take the mean of the two middle values:\n\treturn ( d[ id-1 ] + d[ id ] ) / 2.0;\n}\n\n\n// EXPORTS //\n\nmodule.exports = median;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isArray = require( '@stdlib/assert-is-array' );\nvar isNumber = require( '@stdlib/assert-is-number' ).isPrimitive;\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar isnan = require( '@stdlib/assert-is-nan' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination for validated options\n* @param {Options} options - function options\n* @param {number} [options.alpha] - significance level\n* @param {Array} [options.groups] - array of group indicators\n* @returns {(null|Error)} null or an error\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'alpha' ) ) {\n\t\topts.alpha = options.alpha;\n\t\tif ( !isNumber( opts.alpha ) || isnan( opts.alpha ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a number. Option: `%s`.', 'alpha', opts.alpha ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'groups' ) ) {\n\t\topts.groups = options.groups;\n\t\tif ( !isArray( opts.groups ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an array. Option: `%s`.', 'groups', opts.groups ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert-is-positive-integer' );\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar isBoolean = require( '@stdlib/assert-is-boolean' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar roundn = require( '@stdlib/math-base-special-roundn' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Pretty-print output of test.\n*\n* @param {Object} [opts] - options object\n* @param {PositiveInteger} [opts.digits=4] - number of digits after the decimal point\n* @param {boolean} [opts.decision=true] - boolean indicating whether to print the test decision\n* @throws {TypeError} options must be an object\n* @throws {TypeError} must provide valid options\n* @returns {string} formatted output\n*/\nfunction print( opts ) { // eslint-disable-line stdlib/no-redeclare\n\t/* eslint-disable no-invalid-this */\n\tvar decision;\n\tvar dgts;\n\tvar str;\n\n\tdgts = 4;\n\tdecision = true;\n\tif ( arguments.length > 0 ) {\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'digits' ) ) {\n\t\t\tif ( !isPositiveInteger( opts.digits ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'digits', opts.digits ) );\n\t\t\t}\n\t\t\tdgts = opts.digits;\n\t\t}\n\t\tif ( hasOwnProp( opts, 'decision' ) ) {\n\t\t\tif ( !isBoolean( opts.decision ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'decision', opts.decision ) );\n\t\t\t}\n\t\t\tdecision = opts.decision;\n\t\t}\n\t}\n\n\tstr = '';\n\tstr += this.method;\n\tstr += '\\n\\n';\n\tstr += 'Null hypothesis: The variances in all groups are the same.';\n\tstr += '\\n\\n';\n\tstr += '    pValue: ' + roundn( this.pValue, -dgts ) + '\\n';\n\tstr += '    statistic: ' + roundn( this.statistic, -dgts ) + '\\n';\n\tstr += '    df: ' + roundn( this.df, -dgts );\n\tstr += '\\n\\n';\n\tif ( decision ) {\n\t\tstr += 'Test Decision: ';\n\t\tif ( this.rejected ) {\n\t\t\tstr += 'Reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t} else {\n\t\t\tstr += 'Fail to reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t}\n\t\tstr += '\\n';\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\n\nmodule.exports = print;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isCollection = require( '@stdlib/assert-is-collection' );\nvar isPlainObject = require( '@stdlib/assert-is-plain-object' );\nvar setReadOnly = require( '@stdlib/utils-define-read-only-property' );\nvar objectKeys = require( '@stdlib/utils-keys' );\nvar qnorm = require( '@stdlib/stats-base-dists-normal-quantile' );\nvar chisqCDF = require( '@stdlib/stats-base-dists-chisquare-cdf' );\nvar group = require( '@stdlib/utils-group' );\nvar ranks = require( '@stdlib/stats-ranks' );\nvar abs = require( '@stdlib/math-base-special-abs' );\nvar pow = require( '@stdlib/math-base-special-pow' );\nvar indexOf = require( '@stdlib/utils-index-of' );\nvar format = require( '@stdlib/string-format' );\nvar median = require( './median.js' );\nvar validate = require( './validate.js' );\nvar print = require( './print.js' ); // eslint-disable-line stdlib/no-redeclare\n\n\n// FUNCTIONS //\n\n/**\n* Returns an array of a chosen length filled with the supplied value.\n*\n* @private\n* @param {*} val - value to repeat\n* @param {NonNegativeInteger} len - array length\n* @returns {Array} filled array\n*/\nfunction repeat( val, len ) {\n\tvar out = new Array( len );\n\tvar i;\n\n\tfor ( i = 0; i < len; i++ ) {\n\t\tout[ i ] = val;\n\t}\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Computes the Fligner-Killeen test for equal variances.\n*\n* @param {...NumericArray} arguments - either two or more number arrays or a single numeric array if an array of group indicators is supplied as an option\n* @param {Options} [options] - function options\n* @param {number} [options.alpha=0.05] - significance level\n* @param {Array} [options.groups] - array of group indicators\n* @throws {TypeError} must provide array-like arguments\n* @throws {RangeError} alpha option has to be a number in the interval `[0,1]`\n* @throws {Error} must provide at least two array-like arguments if `groups` is not set\n* @throws {TypeError} options must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Object} test results\n*\n* @example\n* // Data from Hollander & Wolfe (1973), p. 116:\n* var x = [ 2.9, 3.0, 2.5, 2.6, 3.2 ];\n* var y = [ 3.8, 2.7, 4.0, 2.4 ];\n* var z = [ 2.8, 3.4, 3.7, 2.2, 2.0 ];\n*\n* var out = fligner( x, y, z );\n* // returns {...}\n*/\nfunction fligner() {\n\tvar variance;\n\tvar options;\n\tvar ngroups;\n\tvar levels;\n\tvar groups;\n\tvar scores;\n\tvar table;\n\tvar alpha;\n\tvar delta;\n\tvar args;\n\tvar mean;\n\tvar opts;\n\tvar pval;\n\tvar sums;\n\tvar xabs;\n\tvar stat;\n\tvar err;\n\tvar loc;\n\tvar out;\n\tvar df;\n\tvar M2;\n\tvar a;\n\tvar n;\n\tvar x;\n\tvar i;\n\tvar j;\n\n\targs = [];\n\tngroups = arguments.length;\n\topts = {};\n\tif ( isPlainObject( arguments[ ngroups - 1 ] ) ) {\n\t\toptions = arguments[ ngroups - 1 ];\n\t\tngroups -= 1;\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( opts.groups ) {\n\t\tgroups = opts.groups;\n\t\ttable = group( arguments[ 0 ], groups );\n\t\tlevels = objectKeys( table );\n\t\tngroups = levels.length;\n\t\tif ( ngroups < 2 ) {\n\t\t\tthrow new Error( format( 'invalid option. `%s` option must be an array containing at least two unique elements. Option: `%s`.', 'groups', levels ) );\n\t\t}\n\t\tfor ( i = 0; i < ngroups; i++ ) {\n\t\t\targs.push( table[ levels[ i ] ] );\n\t\t}\n\t} else {\n\t\tgroups = [];\n\t\tfor ( i = 0; i < ngroups; i++ ) {\n\t\t\targs.push( arguments[ i ] );\n\t\t\tgroups = groups.concat( repeat( i, arguments[ i ].length ) );\n\t\t}\n\t}\n\tif ( opts.alpha === void 0 ) {\n\t\talpha = 0.05;\n\t} else {\n\t\talpha = opts.alpha;\n\t}\n\tif ( alpha < 0.0 || alpha > 1.0 ) {\n\t\tthrow new RangeError( format( 'invalid option. `%s` option must be a number on the interval: [0, 1]. Option: `%f`.', 'alpha', alpha ) );\n\t}\n\tx = [];\n\tfor ( i = 0; i < ngroups; i++ ) {\n\t\tif ( !isCollection( args[ i ] ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide array-like arguments. Value: `%s`.', args[ i ] ) );\n\t\t}\n\t\tif ( args[ i ].length === 0 ) {\n\t\t\tthrow new Error( format( 'invalid argument. Supplied arrays cannot be empty. Value: `%s`.', args[ i ] ) );\n\t\t}\n\t\tloc = median( args[ i ] );\n\t\tfor ( j = 0; j < args[ i ].length; j++ ) {\n\t\t\targs[ i ][ j ] -= loc;\n\t\t}\n\t\tx = x.concat( args[ i ] );\n\t}\n\tn = x.length;\n\txabs = new Array( n );\n\tfor ( i = 0; i < n; i++ ) {\n\t\txabs[ i ] = abs( x[ i ] );\n\t}\n\tscores = ranks( xabs );\n\ta = new Array( n );\n\tmean = 0.0;\n\tM2 = 0.0;\n\tsums = repeat( 0.0, ngroups );\n\tfor ( i = 0; i < n; i++ ) {\n\t\ta[ i ] = qnorm( ( 1.0 + ( scores[ i ]/(n+1) ) ) / 2.0, 0.0, 1.0 );\n\t\tsums[ ( levels ) ? indexOf( levels, groups[i] ) : groups[i] ] += a[ i ];\n\t\tdelta = a[ i ] - mean;\n\t\tmean += delta / ( i+1 );\n\t\tM2 += delta * ( a[ i ] - mean );\n\t}\n\tvariance = M2 / ( n - 1 );\n\tstat = 0.0;\n\tfor ( i = 0; i < ngroups; i++ ) {\n\t\tstat += pow( sums[ i ], 2 ) / args[ i ].length;\n\t}\n\tstat = ( stat - ( n * pow( mean, 2 ) ) ) / variance;\n\tdf = ngroups - 1;\n\tpval = 1.0 - chisqCDF( stat, df );\n\n\tout = {};\n\tsetReadOnly( out, 'rejected', pval <= alpha );\n\tsetReadOnly( out, 'alpha', alpha );\n\tsetReadOnly( out, 'pValue', pval );\n\tsetReadOnly( out, 'statistic', stat );\n\tsetReadOnly( out, 'df', df );\n\tsetReadOnly( out, 'method', 'Fligner-Killeen test of homogeneity of variances' );\n\tsetReadOnly( out, 'print', print );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = fligner;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the Fligner-Killeen test for equal variances.\n*\n* @module @stdlib/stats-fligner-test\n*\n* @example\n* var flignerTest = require( '@stdlib/stats-fligner-test' );\n*\n* // Data from Hollander & Wolfe (1973), p. 116:\n* var x = [ 2.9, 3.0, 2.5, 2.6, 3.2 ];\n* var y = [ 3.8, 2.7, 4.0, 2.4 ];\n* var z = [ 2.8, 3.4, 3.7, 2.2, 2.0 ];\n*\n* var out = flignerTest( x, y, z );\n* // returns {...}\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_median", "__commonJSMin", "exports", "module", "floor", "ascending", "a", "b", "median", "arr", "len", "id", "d", "i", "require_validate", "__commonJSMin", "exports", "module", "isArray", "isNumber", "isObject", "isnan", "hasOwnProp", "format", "validate", "opts", "options", "require_print", "__commonJSMin", "exports", "module", "isPositiveInteger", "isObject", "isBoolean", "hasOwnProp", "roundn", "format", "print", "opts", "decision", "dgts", "str", "require_main", "__commonJSMin", "exports", "module", "isCollection", "isPlainObject", "setReadOnly", "objectKeys", "qnorm", "chisqCDF", "group", "ranks", "abs", "pow", "indexOf", "format", "median", "validate", "print", "repeat", "val", "len", "out", "i", "fligner", "variance", "options", "ngroups", "levels", "groups", "scores", "table", "alpha", "delta", "args", "mean", "opts", "pval", "sums", "xabs", "stat", "err", "loc", "df", "M2", "a", "n", "x", "j", "main"]
}
